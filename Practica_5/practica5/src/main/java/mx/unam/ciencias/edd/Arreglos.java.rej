--- src/main/java/mx/unam/ciencias/edd/Arreglos.java
+++ src/main/java/mx/unam/ciencias/edd/Arreglos.java
@@ -19,6 +19,7 @@ public class Arreglos {
     public static <T> void
     quickSort(T[] arreglo, Comparator<T> comparador) {
         // Aquí va su código.
+        quicksort(arreglo,0, arreglo.length-1, comparador);
     }
 
     /**
@@ -31,6 +32,39 @@ public class Arreglos {
         quickSort(arreglo, (a, b) -> a.compareTo(b));
     }
 
+    private static <T> void
+    quicksort(T [] arreglo, int a , int b, Comparator<T> comparador){
+
+      int pivote =a;
+
+
+      if(b <= pivote)
+      return;
+
+      int i = pivote+1;
+      int j= b;
+
+      while(i<j)
+        if(comparador.compare(arreglo[i], arreglo[pivote])>0  &&  comparador.compare(arreglo[j], arreglo[pivote])<=0)
+
+          interchange(arreglo, i++, j--);
+
+        else if(comparador.compare(arreglo[i], arreglo[pivote]) <=0)
+        i++;
+        else
+        j--;
+
+
+      if(comparador.compare(arreglo[i], arreglo[pivote])>0)
+      i--;
+
+      interchange(arreglo,pivote,i);
+      quicksort(arreglo, pivote, i-1, comparador);
+      quicksort(arreglo, i+1, b, comparador);
+
+
+    }
+
     /**
      * Ordena el arreglo recibido usando SelectionSort.
      * @param <T> tipo del que puede ser el arreglo.
@@ -40,6 +74,17 @@ public class Arreglos {
     public static <T> void
     selectionSort(T[] arreglo, Comparator<T> comparador) {
         // Aquí va su código.
+        for(int i=0; i<arreglo.length; i++){
+
+          int m=i;
+
+          for(int j = i+1 ; j<arreglo.length; j++)
+            if(comparador.compare(arreglo[j],arreglo[m])<0)
+              m=j;
+              interchange(arreglo, i, m);
+
+        }
+
     }
 
     /**
@@ -52,6 +97,18 @@ public class Arreglos {
         selectionSort(arreglo, (a, b) -> a.compareTo(b));
     }
 
+
+    /**
+    *Intercambia los valores el mayor contra el menor
+    *
+    */
+    private static <T> void interchange(T[] arreglo, int i, int m){
+      if(i==m)return;
+
+        T aux = arreglo[m];// guardamos al mas grande a cambiar
+        arreglo[m]=arreglo[i];//ahora como este se encuentra al principio se coloca el mas pequeño
+        arreglo[i]=aux;// regresamos el valor mas grande
+    }
     /**
      * Hace una búsqueda binaria del elemento en el arreglo. Regresa el índice
      * del elemento en el arreglo, o -1 si no se encuentra.
@@ -63,9 +120,18 @@ public class Arreglos {
      */
     public static <T> int
     busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador) {
-        // Aquí va su código.
+
+              for(int i=0; i<arreglo.length ; i++){
+                if(comparador.compare(arreglo[i], elemento)==0){
+                  return i;
+                }
+              }
+
+              return -1;
+
     }
 
+
     /**
      * Hace una búsqueda binaria del elemento en el arreglo. Regresa el índice
      * del elemento en el arreglo, o -1 si no se encuentra.
