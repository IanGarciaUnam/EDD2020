--- src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
+++ src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
@@ -30,6 +30,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         public Vertice(T elemento) {
             // Aquí va su código.
+            this.elemento=elemento;
+
         }
 
         /**
@@ -39,6 +41,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         @Override public boolean hayPadre() {
             // Aquí va su código.
+            return this.padre!=null;
+
+
         }
 
         /**
@@ -48,6 +53,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         @Override public boolean hayIzquierdo() {
             // Aquí va su código.
+              return izquierdo!=null;
         }
 
         /**
@@ -57,6 +63,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         @Override public boolean hayDerecho() {
             // Aquí va su código.
+            return derecho!=null;
         }
 
         /**
@@ -66,6 +73,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         @Override public VerticeArbolBinario<T> padre() {
             // Aquí va su código.
+            if(!hayPadre()) throw new NoSuchElementException();
+
+            return this.padre;
         }
 
         /**
@@ -75,6 +85,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         @Override public VerticeArbolBinario<T> izquierdo() {
             // Aquí va su código.
+            if(izquierdo == null) throw new NoSuchElementException();
+
+            return izquierdo;
         }
 
         /**
@@ -84,6 +97,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         @Override public VerticeArbolBinario<T> derecho() {
             // Aquí va su código.
+            if(derecho == null) throw new NoSuchElementException();
+
+            return derecho;
         }
 
         /**
@@ -92,6 +108,16 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         @Override public int altura() {
             // Aquí va su código.
+
+              return altura(this);
+
+        }
+
+
+        private int altura(Vertice ver){
+           if(ver==null)return -1;
+
+           return 1+ Math.max(altura(ver.izquierdo), altura(ver.derecho));
         }
 
         /**
@@ -100,14 +126,28 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          */
         @Override public int profundidad() {
             // Aquí va su código.
+
+            return profundidad(this);
         }
 
+
+        private int profundidad(Vertice v) {
+            // Aquí va su código.
+            if(v.padre==null) return 0;
+
+            return 1 + profundidad(v.padre);
+        }
+
+
         /**
          * Regresa el elemento al que apunta el vértice.
          * @return el elemento al que apunta el vértice.
          */
         @Override public T get() {
             // Aquí va su código.
+            if(this.elemento==null) return null;
+
+            return this.elemento;
         }
 
         /**
@@ -125,14 +165,33 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
                 return false;
             @SuppressWarnings("unchecked") Vertice vertice = (Vertice)objeto;
             // Aquí va su código.
+
+            return equals(raiz, vertice) && equals(raiz.izquierdo, vertice.izquierdo) && equals(raiz.derecho, vertice.derecho);
+        }
+
+
+        private boolean equals(Vertice here, Vertice strange){
+            if(here==null && strange!=null)return false;
+            if(here!=null && strange==null)return false;
+
+
+            if(here==null && strange==null) return true;
+
+            return here.get().equals(strange.get()) && equals(here.izquierdo, strange.izquierdo) || equals(here.derecho, strange.derecho);
         }
 
+
+
+
+
+
         /**
          * Regresa una representación en cadena del vértice.
          * @return una representación en cadena del vértice.
          */
         public String toString() {
             // Aquí va su código.
+            return elemento.toString();
         }
     }
 
@@ -154,8 +213,16 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      */
     public ArbolBinario(Coleccion<T> coleccion) {
         // Aquí va su código.
+
+        for(T e: coleccion)
+          agrega(e);
+
+
     }
 
+
+
+
     /**
      * Construye un nuevo vértice, usando una instancia de {@link Vertice}. Para
      * crear vértices se debe utilizar este método en lugar del operador
@@ -167,6 +234,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      */
     protected Vertice nuevoVertice(T elemento) {
         // Aquí va su código.
+      return new Vertice(elemento);
     }
 
     /**
@@ -175,15 +243,28 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return la altura del árbol.
      */
     public int altura() {
-        // Aquí va su código.
+        // Aquí va su código
+
+        if(raiz==null) return -1;
+
+        return raiz.altura();
     }
 
+
+
+
+
+
+
+
     /**
      * Regresa el número de elementos que se han agregado al árbol.
      * @return el número de elementos en el árbol.
      */
     @Override public int getElementos() {
         // Aquí va su código.
+
+        return elementos;
     }
 
     /**
@@ -194,8 +275,11 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      */
     @Override public boolean contiene(T elemento) {
         // Aquí va su código.
+        return busca(elemento) != null;
+
     }
 
+
     /**
      * Busca el vértice de un elemento en el árbol. Si no lo encuentra regresa
      * <code>null</code>.
@@ -205,8 +289,31 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      */
     public VerticeArbolBinario<T> busca(T elemento) {
         // Aquí va su código.
+
+
+        return busca(raiz, elemento);
     }
 
+
+    private VerticeArbolBinario<T> busca(Vertice v, T elemento){
+
+      if(v==null || elemento == null)
+      return null;
+
+      if(v.get().equals(elemento))
+      return v;
+
+      VerticeArbolBinario<T> vIzq= busca(v.izquierdo, elemento);
+      VerticeArbolBinario<T> vDer =busca(v.derecho,elemento);
+
+
+
+
+      return vIzq != null ? vIzq : vDer;
+
+
+  }
+
     /**
      * Regresa el vértice que contiene la raíz del árbol.
      * @return el vértice que contiene la raíz del árbol.
@@ -214,6 +321,10 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      */
     public VerticeArbolBinario<T> raiz() {
         // Aquí va su código.
+        if(raiz==null)
+        throw new NoSuchElementException();
+
+        return raiz;
     }
 
     /**
@@ -223,6 +334,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      */
     @Override public boolean esVacia() {
         // Aquí va su código.
+        return raiz == null;
     }
 
     /**
@@ -230,6 +342,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      */
     @Override public void limpia() {
         // Aquí va su código.
+        raiz=null;
+        elementos=0;
     }
 
     /**
@@ -244,16 +358,80 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
         @SuppressWarnings("unchecked")
             ArbolBinario<T> arbol = (ArbolBinario<T>)objeto;
         // Aquí va su código.
+
+      if(this.esVacia() && arbol.esVacia()) return true;
+
+      return this.raiz.equals(arbol.raiz) && this.elementos==arbol.elementos;
+
     }
 
+
     /**
      * Regresa una representación en cadena del árbol.
      * @return una representación en cadena del árbol.
      */
     @Override public String toString() {
         // Aquí va su código.
+
+        return toString(this);
+
+    }
+
+    private String toString(Vertice v, int nivel, boolean[] arreglo){
+      String s="";
+      s+= v.toString()+"\n";
+
+      arreglo[nivel]=true;
+
+      if(v.izquierdo != null && v.derecho != null){
+        s+= dibujaEspacios(nivel,arreglo);
+        s+= "├─›";
+        s+= toString(v.izquierdo, nivel+1, arreglo);
+        s+=dibujaEspacios(nivel, arreglo);
+        s+="└─»";
+        arreglo[nivel]=false;
+        s+= toString(v.derecho,nivel+1,arreglo);
+      }else if(v.izquierdo != null){
+        s+= dibujaEspacios(nivel, arreglo);
+        s+= "└─›";
+        arreglo[nivel]=false;
+        s+= toString(v.izquierdo, nivel+1, arreglo);
+
+      }else if(v.derecho != null){
+
+        s+= dibujaEspacios(nivel, arreglo);
+        s+="└─»";
+        arreglo[nivel]=false;
+        s+= toString(v.derecho, nivel+1, arreglo);
+      }
+      return s;
     }
 
+    private String toString(ArbolBinario<T> t){
+      if(t.raiz == null)return "";
+
+      boolean [] arreglo = new boolean[t.altura()+1];
+
+      for(int i=0; i< t.altura()+1; i++)
+        arreglo[i]=false;
+
+      return toString(t.raiz, 0, arreglo);
+
+    }
+
+    private String dibujaEspacios(int nivel, boolean[] e){
+
+      String s ="";
+      for(int i=0; i<nivel; i++){
+
+        if(e[i] == true)
+        s+="│  ";
+        else
+        s+="   ";
+
+    }
+    return s;
+  }
     /**
      * Convierte el vértice (visto como instancia de {@link
      * VerticeArbolBinario}) en vértice (visto como instancia de {@link
